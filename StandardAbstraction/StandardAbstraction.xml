<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StandardAbstraction</name>
    </assembly>
    <members>
        <member name="T:StandardAbstraction.Console">
            <summary>
          Provides an abstraction of the System.Console class, to facilitate mocking and unit testing.
        </summary>
        </member>
        <member name="M:StandardAbstraction.Console.#ctor">
            <summary>
            Initialises a new instance of the StandardAbstraction.Console class.
            </summary>
        </member>
        <member name="M:StandardAbstraction.Console.Write(System.String)">
            <summary>
          Writes the specified string value to the standard output stream.
        </summary><param name="value">The value to write.</param>
        </member>
        <member name="M:StandardAbstraction.Console.WriteLine">
            <summary>
          Writes the current line terminator to the standard output stream.
        </summary>
        </member>
        <member name="M:StandardAbstraction.Console.WriteLine(System.String)">
            <summary>
          Writes the specified string value, followed by the current line terminator, to the standard output stream.
        </summary><param name="value">The value to write.</param>
        </member>
        <member name="M:StandardAbstraction.Console.Clear">
            <summary>
          Clears the console buffer and corresponding console window of display information.
        </summary>
        </member>
        <member name="T:StandardAbstraction.DateTime">
            <summary>
            Provides an abstraction of the System.DateTime structure, to facilitate mocking and unit testing.
            </summary>
        </member>
        <member name="P:StandardAbstraction.DateTime.Now">
            <summary>
          Gets a DateTime object that is set to the current date and time on this computer, expressed as the local time.
        </summary>
        </member>
        <member name="P:StandardAbstraction.DateTime.UtcNow">
            <summary>
          Gets a DateTime object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
        </summary>
        </member>
        <member name="T:StandardAbstraction.ExtendedTcpListener">
            <summary>
            An extended version of the System.Net.Sockets.TcpListener class, which exposes protected methods on that class.
            </summary>
        </member>
        <member name="M:StandardAbstraction.ExtendedTcpListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialises a new instance of the StandardAbstraction.ExtendedTcpListener class.
            </summary>
            <param name="ipAddress">An IPAddress that represents the local IP address.</param>
            <param name="port">The port on which to listen for incoming connection attempts. </param>
        </member>
        <member name="P:StandardAbstraction.ExtendedTcpListener.Active">
            <summary>
            Gets a value that indicates whether TcpListener is actively listening for client connections.
            </summary>
        </member>
        <member name="T:StandardAbstraction.File">
            <summary>
            Provides an abstraction of common operations on a file, to facilitate mocking and unit testing.
            </summary>
        </member>
        <member name="F:StandardAbstraction.File.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="M:StandardAbstraction.File.#ctor">
            <summary>
            Initialises a new instance of the StandardAbstraction.File class.
            </summary>
        </member>
        <member name="M:StandardAbstraction.File.#ctor(System.String)">
            <summary>
            Initialises a new instance of the StandardAbstraction.File class.
            </summary>
            <param name="path">The full path to the file.</param>
        </member>
        <member name="P:StandardAbstraction.File.Path">
            <summary>
                The full path to the file.
            </summary>
        </member>
        <member name="M:StandardAbstraction.File.ReadAll">
            <summary>
                Reads the entire contents of the file as a string.
            </summary><returns>The contents of the file.</returns>
        </member>
        <member name="M:StandardAbstraction.File.WriteAll(System.String)">
            <summary>
                Overwrites the entire contents of the file with the specified string.
            </summary><param name="data">The data to write to the file.</param>
        </member>
        <member name="M:StandardAbstraction.File.ReadAllLines(System.String)">
            <summary>
              Opens a text file, reads all lines of the file, and then closes the file.
            </summary><param name="path">The file to open for reading.</param><returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:StandardAbstraction.File.OpenRead(System.String)">
            <summary>
              Opens an existing file for reading.
            </summary><param name="path">The file to be opened for reading. </param><returns>A read-only IFileStream on the specified path.</returns>
        </member>
        <member name="M:StandardAbstraction.File.Open(System.IO.FileMode)">
            <summary>
            Opens the file in exclusive mode so that other processes cannot access it.
            </summary>
            <param name="fileMode">The mode that the file should be opened in.</param>
        </member>
        <member name="M:StandardAbstraction.File.Close">
            <summary>
            Closes the file.
            </summary>
        </member>
        <member name="M:StandardAbstraction.File.Dispose">
            <summary>
            Releases the unmanaged resources used by the File.
            </summary>
        </member>
        <member name="M:StandardAbstraction.File.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:StandardAbstraction.FileInfo">
            <summary>
          Provides an abstraction of the System.IO.FileInfo class, to facilitate mocking and unit testing.
        </summary>
        </member>
        <member name="M:StandardAbstraction.FileInfo.#ctor(System.IO.FileInfo)">
            <summary>
            Initialises a new instance of the StandardAbstraction.FileInfo class.
            </summary>
        </member>
        <member name="P:StandardAbstraction.FileInfo.DirectoryName">
            <summary>
          Gets a string representing the directory's full path.
        </summary>
        </member>
        <member name="P:StandardAbstraction.FileInfo.Name">
            <summary>
          Gets the name of the file.
        </summary>
        </member>
        <member name="T:StandardAbstraction.FileStream">
            <summary>
          Provides an abstraction of the System.IO.FileStream class, to facilitate mocking and unit testing.
        </summary>
        </member>
        <member name="F:StandardAbstraction.FileStream.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="M:StandardAbstraction.FileStream.#ctor(System.IO.FileStream)">
            <summary>
            Initialises a new instance of the StandardAbstraction.FileStream class.
            </summary>
            <param name="underlyingFileStream">The real System.IO.FileStream underlying this object.</param>
        </member>
        <member name="M:StandardAbstraction.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
          Sets the current position of this stream to the given value.
        </summary><param name="offset">The point relative to origin from which to begin seeking.</param><param name="origin">Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type SeekOrigin.</param><returns>The new position in the stream.</returns>
        </member>
        <member name="M:StandardAbstraction.FileStream.Read(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
          Reads a block of bytes from the stream and writes the data in a given buffer.
        </summary><param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param><param name="offset">The byte offset in array at which the read bytes will be placed.</param><param name="count">The maximum number of bytes to read.</param><returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:StandardAbstraction.FileStream.Dispose">
            <summary>
            Releases all resources used by the Stream.
            </summary>
        </member>
        <member name="M:StandardAbstraction.FileStream.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:StandardAbstraction.FileSystem">
            <summary>
            Provides an abstraction of common operations on the file system, to facilitate mocking and unit testing.
            </summary>
        </member>
        <member name="M:StandardAbstraction.FileSystem.#ctor">
            <summary>
            Initialises a new instance of the StandardAbstraction.FileSystem class.
            </summary>
        </member>
        <member name="M:StandardAbstraction.FileSystem.CheckFileExists(System.String)">
            <summary>
                Checks whether a file at the given path exists in the file system.
            </summary><param name="path">The full path to the file.</param><returns>Whether the specified file exists.</returns>
        </member>
        <member name="M:StandardAbstraction.FileSystem.DeleteFile(System.String)">
            <summary>
                Deletes the file specified by the given path.
            </summary><param name="path">The full path to the file.</param>
        </member>
        <member name="T:StandardAbstraction.IConsole">
            <summary>
          Provides an abstraction of the System.Console class, to facilitate mocking and unit testing.
        </summary>
        </member>
        <member name="M:StandardAbstraction.IConsole.Write(System.String)">
            <summary>
          Writes the specified string value to the standard output stream.
        </summary><param name="value">The value to write.</param>
        </member>
        <member name="M:StandardAbstraction.IConsole.WriteLine">
            <summary>
          Writes the current line terminator to the standard output stream.
        </summary>
        </member>
        <member name="M:StandardAbstraction.IConsole.WriteLine(System.String)">
            <summary>
          Writes the specified string value, followed by the current line terminator, to the standard output stream.
        </summary><param name="value">The value to write.</param>
        </member>
        <member name="M:StandardAbstraction.IConsole.Clear">
            <summary>
          Clears the console buffer and corresponding console window of display information.
        </summary>
        </member>
        <member name="T:StandardAbstraction.IDateTime">
            <summary>
          Provides an abstraction of the System.DateTime structure, to facilitate mocking and unit testing.
        </summary>
        </member>
        <member name="P:StandardAbstraction.IDateTime.Now">
            <summary>
          Gets a DateTime object that is set to the current date and time on this computer, expressed as the local time.
        </summary>
        </member>
        <member name="P:StandardAbstraction.IDateTime.UtcNow">
            <summary>
          Gets a DateTime object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
        </summary>
        </member>
        <member name="T:StandardAbstraction.IFile">
            <summary>
                Represents a file within the file system.
            </summary>
        </member>
        <member name="P:StandardAbstraction.IFile.Path">
            <summary>
                The full path to the file.
            </summary>
        </member>
        <member name="M:StandardAbstraction.IFile.ReadAll">
            <summary>
                Reads the entire contents of the file as a string.
            </summary><returns>The contents of the file.</returns>
        </member>
        <member name="M:StandardAbstraction.IFile.WriteAll(System.String)">
            <summary>
                Overwrites the entire contents of the file with the specified string.
            </summary><param name="data">The data to write to the file.</param>
        </member>
        <member name="M:StandardAbstraction.IFile.ReadAllLines(System.String)">
            <summary>
              Opens a text file, reads all lines of the file, and then closes the file.
            </summary><param name="path">The file to open for reading.</param><returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:StandardAbstraction.IFile.OpenRead(System.String)">
            <summary>
              Opens an existing file for reading.
            </summary><param name="path">The file to be opened for reading. </param><returns>A read-only IFileStream on the specified path.</returns>
        </member>
        <member name="T:StandardAbstraction.IFileInfo">
            <summary>
          Provides an abstraction of the System.IO.FileInfo class, to facilitate mocking and unit testing.
        </summary>
        </member>
        <member name="P:StandardAbstraction.IFileInfo.DirectoryName">
            <summary>
          Gets a string representing the directory's full path.
        </summary>
        </member>
        <member name="P:StandardAbstraction.IFileInfo.Name">
            <summary>
          Gets the name of the file.
        </summary>
        </member>
        <member name="T:StandardAbstraction.IFileStream">
            <summary>
          Provides an abstraction of the System.IO.FileStream class, to facilitate mocking and unit testing.
        </summary>
        </member>
        <member name="M:StandardAbstraction.IFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
          Sets the current position of this stream to the given value.
        </summary><param name="offset">The point relative to origin from which to begin seeking.</param><param name="origin">Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type SeekOrigin.</param><returns>The new position in the stream.</returns>
        </member>
        <member name="M:StandardAbstraction.IFileStream.Read(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
          Reads a block of bytes from the stream and writes the data in a given buffer.
        </summary><param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param><param name="offset">The byte offset in array at which the read bytes will be placed.</param><param name="count">The maximum number of bytes to read.</param><returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <remarks>Note 'array' parameter has 'ref' keyword defined, even though it is not defined as such on System.IO.FileStream class.  Reason is that NMock2 SetNamedParameterAction requires ref be defined on methods where data passed in is changed, otherwise attempting to change the parameter value has no effect.</remarks>
        </member>
        <member name="T:StandardAbstraction.IFileSystem">
            <summary>
                Represents the file system.
            </summary>
        </member>
        <member name="M:StandardAbstraction.IFileSystem.CheckFileExists(System.String)">
            <summary>
                Checks whether a file at the given path exists in the file system.
            </summary><param name="path">The full path to the file.</param><returns>Whether the specified file exists.</returns>
        </member>
        <member name="M:StandardAbstraction.IFileSystem.DeleteFile(System.String)">
            <summary>
                Deletes the file specified by the given path.
            </summary><param name="path">The full path to the file.</param>
        </member>
        <member name="T:StandardAbstraction.INetworkStream">
            <summary>
                Provides an abstraction of the System.Net.Sockets.NetworkStream class, to facilitate mocking and unit testing.
            </summary>
        </member>
        <member name="P:StandardAbstraction.INetworkStream.CanRead">
            <summary>
                Gets a value that indicates whether the NetworkStream supports reading.
            </summary>
        </member>
        <member name="M:StandardAbstraction.INetworkStream.Read(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
                Reads data from the NetworkStream.
            </summary><param name="buffer">An array of type Byte that is the location in memory to store data read from the NetworkStream.</param><param name="offset">The location in buffer to begin storing the data to. </param><param name="size">The number of bytes to read from the NetworkStream. </param><returns>The number of bytes read from the NetworkStream.</returns><remarks>Note that parameter 'buffer' has been explicitly marked as a ref parameter, to allow correct mocking of this method with NMock2.</remarks>
        </member>
        <member name="M:StandardAbstraction.INetworkStream.ReadByte">
            <summary>
                Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary><returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:StandardAbstraction.INetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes data to the stream.
            </summary><param name="buffer">An array of type Byte that contains the data to write to the stream. </param><param name="offset">The location in buffer from which to start writing data. </param><param name="size">The number of bytes to write to the stream.</param>
        </member>
        <member name="M:StandardAbstraction.INetworkStream.WriteByte(System.Byte)">
            <summary>
                Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary><param name="value">The byte to write to the stream.</param>
        </member>
        <member name="T:StandardAbstraction.IStreamWriter">
            <summary>
                Provides an abstraction of the System.IO.StreamWriter class, to facilitate mocking and unit testing.
            </summary>
        </member>
        <member name="M:StandardAbstraction.IStreamWriter.Close">
            <summary>
                Closes the current StreamWriter object and the underlying stream.
            </summary>
        </member>
        <member name="M:StandardAbstraction.IStreamWriter.Flush">
            <summary>
               Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.
            </summary>
        </member>
        <member name="M:StandardAbstraction.IStreamWriter.WriteLine(System.String)">
            <summary>
                Writes a string followed by a line terminator to the text string or stream.
            </summary><param name="value">The string to write. If value is null, only the line terminator is written. </param>
        </member>
        <member name="T:StandardAbstraction.ITcpClient">
            <summary>
                Provides an abstraction of the System.Net.Sockets.TcpClient class, to facilitate mocking and unit testing.
            </summary>
        </member>
        <member name="P:StandardAbstraction.ITcpClient.Connected">
            <summary>
                Gets a value indicating whether the underlying Socket for the TcpClient class is connected to a remote host.
            </summary>
        </member>
        <member name="P:StandardAbstraction.ITcpClient.Available">
            <summary>
                Gets the amount of data that has been received from the network and is available to be read.
            </summary>
        </member>
        <member name="M:StandardAbstraction.ITcpClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
                Connects the client to a remote TCP host using the specified IP address and port number.
            </summary><param name="ipAddress">The System.Net.IPAddress of the host to which you intend to connect.</param><param name="port">The port number to which you intend to connect.</param>
        </member>
        <member name="M:StandardAbstraction.ITcpClient.GetStream">
            <summary>
                Returns the network stream used to send and receive data.
            </summary><returns>The underlying network stream.</returns>
        </member>
        <member name="M:StandardAbstraction.ITcpClient.Close">
            <summary>
                Disposes this object instance and requests that the underlying TCP connection be closed.
            </summary>
        </member>
        <member name="T:StandardAbstraction.ITcpListener">
            <summary>
                Provides an abstraction of the System.Net.Sockets.TcpListener class, to facilitate mocking and unit testing.
            </summary>
        </member>
        <member name="P:StandardAbstraction.ITcpListener.Active">
            <summary>
                Gets a value that indicates whether the listener is actively listening for client connections.
            </summary>
        </member>
        <member name="M:StandardAbstraction.ITcpListener.Pending">
            <summary>
                Determines if there are pending connection requests.
            </summary><returns>true if connections are pending; otherwise, false.</returns>
        </member>
        <member name="M:StandardAbstraction.ITcpListener.Start(System.Int32)">
            <summary>
                Starts listening for incoming connection requests with a maximum number of pending connection.
            </summary><param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:StandardAbstraction.ITcpListener.AcceptTcpClient">
            <summary>
                Accepts a pending connection request.
            </summary><returns>A TcpClient used to send and receive data.</returns>
        </member>
        <member name="M:StandardAbstraction.ITcpListener.Stop">
            <summary>
                Closes the listener.
            </summary>
        </member>
        <member name="T:StandardAbstraction.NetworkStream">
            <summary>
            Provides an abstraction of the System.Net.Sockets.NetworkStream class, to facilitate mocking and unit testing.
            </summary>
            <remarks>Although instances of this class compose a System.Net.Sockets.NetworkStream object which implements IDisposable, this class does not implement IDisposable due to the fact that its use-case is to return a mockable NetworkStream from a call to TcpClient.GetStream().  The underlying NetworkStream is created by the TcpClient class, and hence the TcpClient should also dispose/finalize it.</remarks>
        </member>
        <member name="M:StandardAbstraction.NetworkStream.#ctor(System.Net.Sockets.NetworkStream)">
            <summary>
            Initialises a new instance of the StandardAbstraction.NetworkStream class.
            </summary>
            <param name="underlyingStream">The System.Net.Sockets.NetworkStream underlying the instance of the class.</param>
        </member>
        <member name="P:StandardAbstraction.NetworkStream.CanRead">
            <summary>
                Gets a value that indicates whether the NetworkStream supports reading.
            </summary>
        </member>
        <member name="M:StandardAbstraction.NetworkStream.Read(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
                Reads data from the NetworkStream.
            </summary><param name="buffer">An array of type Byte that is the location in memory to store data read from the NetworkStream.</param><param name="offset">The location in buffer to begin storing the data to. </param><param name="size">The number of bytes to read from the NetworkStream. </param><returns>The number of bytes read from the NetworkStream.</returns><remarks>Note that parameter 'buffer' has been explicitly marked as a ref parameter, to allow correct mocking of this method with NMock2.</remarks>
        </member>
        <member name="M:StandardAbstraction.NetworkStream.ReadByte">
            <summary>
                Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary><returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:StandardAbstraction.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes data to the stream.
            </summary><param name="buffer">An array of type Byte that contains the data to write to the stream. </param><param name="offset">The location in buffer from which to start writing data. </param><param name="size">The number of bytes to write to the stream.</param>
        </member>
        <member name="M:StandardAbstraction.NetworkStream.WriteByte(System.Byte)">
            <summary>
                Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary><param name="value">The byte to write to the stream.</param>
        </member>
        <member name="T:StandardAbstraction.StreamWriter">
            <summary>
            Provides an abstraction of the System.IO.StreamWriter class, to facilitate mocking and unit testing.
            </summary>
        </member>
        <member name="F:StandardAbstraction.StreamWriter.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="M:StandardAbstraction.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Initialises a new instance of the StandardAbstraction.StreamWriter class.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:StandardAbstraction.StreamWriter.Close">
            <summary>
                Closes the current StreamWriter object and the underlying stream.
            </summary>
        </member>
        <member name="M:StandardAbstraction.StreamWriter.Flush">
            <summary>
               Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.
            </summary>
        </member>
        <member name="M:StandardAbstraction.StreamWriter.WriteLine(System.String)">
            <summary>
                Writes a string followed by a line terminator to the text string or stream.
            </summary><param name="value">The string to write. If value is null, only the line terminator is written. </param>
        </member>
        <member name="M:StandardAbstraction.StreamWriter.Dispose">
            <summary>
            Releases the unmanaged resources used by the StreamWriter.
            </summary>
        </member>
        <member name="M:StandardAbstraction.StreamWriter.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:StandardAbstraction.TcpClient">
            <summary>
            Provides an abstraction of the System.Net.Sockets.TcpClient class, to facilitate mocking and unit testing.
            </summary>
            <remarks>As per http://msdn.microsoft.com/en-us/library/ych8bz3x.aspx, a System.Net.Sockets.Socket object cannot be used to perform a synchronous reconnect after having previously been connected.  Hence the Close() method disposes the underlying TcpClient class, and the Connect() method subsequently creates a new instance.</remarks>
        </member>
        <member name="F:StandardAbstraction.TcpClient.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="P:StandardAbstraction.TcpClient.Connected">
            <summary>
                Gets a value indicating whether the underlying Socket for the TcpClient class is connected to a remote host.
            </summary>
        </member>
        <member name="P:StandardAbstraction.TcpClient.Available">
            <summary>
                Gets the amount of data that has been received from the network and is available to be read.
            </summary>
        </member>
        <member name="M:StandardAbstraction.TcpClient.#ctor">
            <summary>
            Initialises a new instance of the StandardAbstraction.TcpClient class.
            </summary>
        </member>
        <member name="M:StandardAbstraction.TcpClient.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initialises a new instance of the StandardAbstraction.TcpClient class.
            </summary>
            <param name="underlyingClient">The System.Net.Sockets.TcpClient underlying the instance of the class.</param>
            <remarks>Typically a System.Net.Sockets.TcpClient object would be instantiated either by calling the constructor, or being returned from a call to the System.Net.Sockets.TcpListener.AcceptTcpClient() method.  To allow for mocking, this additional constructor is provided.  In the real world case where a TcpClient is returned from the TcpListener.AcceptTcpClient() method, the StandardAbstraction.TcpListener can call the underlying real TcpListener, and use this constructor to wrap and return the socket channel as an StandardAbstraction.ITcpClient.  In the mocked case, a call to StandardAbstraction.TcpListener.AcceptTcpClient() returns a mocked ITcpClient.  The parameterless constructor would be used to create an outbound TCP connection via the Connect() method.  This constructor would be used to accept an inbound TCP connection from a TcpListener object (in which case there is no need to call the Connect() method).</remarks>
        </member>
        <member name="M:StandardAbstraction.TcpClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
                Connects the client to a remote TCP host using the specified IP address and port number.
            </summary><param name="ipAddress">The System.Net.IPAddress of the host to which you intend to connect.</param><param name="port">The port number to which you intend to connect.</param>
        </member>
        <member name="M:StandardAbstraction.TcpClient.GetStream">
            <summary>
                Returns the network stream used to send and receive data.
            </summary><returns>The underlying network stream.</returns>
        </member>
        <member name="M:StandardAbstraction.TcpClient.Close">
            <summary>
                Disposes this object instance and requests that the underlying TCP connection be closed.
            </summary>
        </member>
        <member name="M:StandardAbstraction.TcpClient.Dispose">
            <summary>
            Releases the unmanaged resources used by the TcpClient.
            </summary>
        </member>
        <member name="M:StandardAbstraction.TcpClient.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:StandardAbstraction.TcpListener">
            <summary>
            Provides an abstraction of the System.Net.Sockets.TcpListener class, to facilitate mocking and unit testing.
            </summary>
        </member>
        <member name="F:StandardAbstraction.TcpListener.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="M:StandardAbstraction.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialises a new instance of the StandardAbstraction.TcpListener class.
            </summary>
            <param name="ipAddress">An IPAddress that represents the local IP address.</param>
            <param name="port">The port on which to listen for incoming connection attempts. </param>
        </member>
        <member name="P:StandardAbstraction.TcpListener.Active">
            <summary>
                Gets a value that indicates whether the listener is actively listening for client connections.
            </summary>
        </member>
        <member name="M:StandardAbstraction.TcpListener.Pending">
            <summary>
                Determines if there are pending connection requests.
            </summary><returns>true if connections are pending; otherwise, false.</returns>
        </member>
        <member name="M:StandardAbstraction.TcpListener.Start(System.Int32)">
            <summary>
                Starts listening for incoming connection requests with a maximum number of pending connection.
            </summary><param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:StandardAbstraction.TcpListener.AcceptTcpClient">
            <summary>
                Accepts a pending connection request.
            </summary><returns>A TcpClient used to send and receive data.</returns>
        </member>
        <member name="M:StandardAbstraction.TcpListener.Stop">
            <summary>
                Closes the listener.
            </summary>
        </member>
        <member name="M:StandardAbstraction.TcpListener.Dispose">
            <summary>
            Releases the unmanaged resources used by the TcpListener.
            </summary>
        </member>
        <member name="M:StandardAbstraction.TcpListener.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
    </members>
</doc>
